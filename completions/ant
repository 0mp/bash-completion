# bash completion for ant

have ant || return

_ant()
{
    local cur prev words cword
    _init_completion || return

    case $prev in
        -buildfile|-file|-f)
            _filedir 'xml'
            return 0
            ;;
        -logfile|-l)
            _filedir
            return 0
            ;;
        -propertyfile)
            _filedir properties
            return 0
            ;;
        -nice)
            COMPREPLY=( $( compgen -W '{1..10}' -- "$cur" ) )
            return 0
            ;;
        -lib|-logger|-listener|-D|-inputhandler|-main)
            return 0
            ;;
    esac

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '$( _parse_help "$1" )' -- "$cur" ) )
    else
        # available targets completion
        # find which buildfile to use
        local buildfile=build.xml i
        for (( i=1; i < cword; i++ )); do
            if [[ "${words[i]}" == -@(?(build)file|f) ]]; then
                buildfile=${words[i+1]}
                break
            fi
        done
        [ ! -f $buildfile ] && return 0

        # parse buildfile for targets
        # some versions of sed complain if there's no trailing linefeed,
        # hence the 2>/dev/null
        COMPREPLY=( $( compgen -W "$( tr "'\t\n>" "\"  \n" < $buildfile | \
            sed -ne 's/.*<target .*name="\([^"]*\).*/\1/p' 2>/dev/null )" \
            -- "$cur" ) )
    fi
} &&
have complete-ant-cmd.pl && \
     complete -C complete-ant-cmd.pl -F _ant ant || complete -F _ant ant

# Local variables:
# mode: shell-script
# sh-basic-offset: 4
# sh-indent-comment: t
# indent-tabs-mode: nil
# End:
# ex: ts=4 sw=4 et filetype=sh
