proc setup {} {
    save_env
}; # setup()


proc teardown {} {
    assert_env_unmodified {/COMPREPLY=/d}
}; # teardown()


setup


set test "Hosts should be put in COMPREPLY"
set hosts [get_hosts]
    # Hosts `gee', `hus' and `jar' are defined in ./fixtures/_known_hosts_real/config
    # Hosts `doo' and `ike' are defined in ./fixtures/_known_hosts_real/known_hosts
lappend hosts doo gee hus ike jar
set hosts [lsort -ascii $hosts]
set hosts [join $hosts "\\s+"]
    # Call _known_hosts
set cmd {_known_hosts_real -aF fixtures/_known_hosts_real/config ''; echo_array COMPREPLY}
send "$cmd\r"
expect -ex "$cmd\r\n"
expect {
    -re "^$hosts\r\n/@$"  { pass "$test" }
    -re /@ { unresolved "$test at prompt" }
    default { unresolved "$test" }
}; # expect


sync_after_int


set test "Hosts should have username prefix and colon suffix"
set hosts [get_hosts]
    # Hosts `gee', `hus' and `jar' are defined in ./fixtures/_known_hosts_real/config
    # Hosts `doo' and `ike' are defined in ./fixtures/_known_hosts_real/known_hosts
lappend hosts doo gee hus ike jar
set hosts [lsort -ascii $hosts]
set expected {}
foreach host $hosts {
    lappend expected "user@$host:"
}; # foreach
set expected [join $expected "\\s+"]
    # Call _known_hosts
set cmd {_known_hosts_real -acF fixtures/_known_hosts_real/config 'user@'; echo_array COMPREPLY}
send "$cmd\r"
expect -ex "$cmd\r\n"
expect {
    -re "^$expected\r\n/@$"  { pass "$test" }
    -re /@ { unresolved "$test at prompt" }
    default { unresolved "$test" }
}; # expect


sync_after_int



set test "Config file containing space should work"
set hosts [get_hosts]
    # Hosts `gee' and `hus' are defined in ./fixtures/_known_hosts_real/spaced  conf
    # Hosts `doo' and `ike' are defined in ./fixtures/_known_hosts_real/known_hosts
    # Host `two' is defined in ./fixtures/_known_hosts_real/known_hosts2
lappend hosts gee hus doo ike two
set hosts [lsort -ascii $hosts]
set hosts [join $hosts "\\s+"]
    # Call _known_hosts
set cmd {_known_hosts_real -aF 'fixtures/_known_hosts_real/spaced  conf' ''; echo_array COMPREPLY}
send "$cmd\r"
expect -ex "$cmd\r\n"
expect {
    -re "^$hosts\r\n/@$"  { pass "$test" }
    -re /@ { unresolved "$test at prompt" }
    default { unresolved "$test" }
}; # expect


sync_after_int


set test "Empty COMP_KNOWN_HOSTS_WITH_HOSTFILE should omit HOSTFILE"
assert_bash_exec "COMP_KNOWN_HOSTS_WITH_HOSTFILE="
set hosts {}
    # Hosts `gee', `hus' and `jar' are defined in ./fixtures/_known_hosts_real/config
    # Hosts `doo' and `ike' are defined in ./fixtures/_known_hosts_real/known_hosts
lappend hosts doo gee hus ike jar
set hosts [lsort -ascii $hosts]
set hosts [join $hosts "\\s+"]
    # Call _known_hosts
set cmd {_known_hosts_real -aF fixtures/_known_hosts_real/config ''; echo_array COMPREPLY}
send "$cmd\r"
expect -ex "$cmd\r\n"
expect {
    -re "^$hosts\r\n/@$"  { pass "$test" }
    -re /@ { unresolved "$test at prompt" }
    default { unresolved "$test" }
}; # expect
sync_after_int
assert_bash_exec "unset -v COMP_KNOWN_HOSTS_WITH_HOSTFILE"



sync_after_int


teardown
